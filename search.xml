<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>6、增加评论系统</title>
    <url>/2022/06/22/add-comments/</url>
    <content><![CDATA[<h3 id="1、注册账号和安装"><a href="#1、注册账号和安装" class="headerlink" title="1、注册账号和安装"></a>1、注册账号和安装</h3><p>​官网地址：<a href="https://www.livere.com/">https://www.livere.com/</a> 是韩国人的，首先是注册一个账号。 登录成功后选择 ：安装<br>​ <img src="/2022/06/22/add-comments/16556211254730.jpg" alt="-w898"><br>点击现在安装，在填写域名和用途就可以了</p>
<p>现在安装，立刻会跳转到代码生成页面，提供给嵌入到不同页面的代码，代码里含有data-uid<br><img src="/2022/06/22/add-comments/16556212630554.jpg" alt="-w980"></p>
<h3 id="2、hexo进行配置"><a href="#2、hexo进行配置" class="headerlink" title="2、hexo进行配置"></a>2、hexo进行配置</h3><p>在next主题的_config.yml文件中找到如下的配置<br><img src="/2022/06/22/add-comments/16556213917907.jpg" alt="-w769"><br>启动you uid改成你申请的即可。</p>
<p>3、本地部署验证：<br>本地发布执行hexo s 部署<br><img src="/2022/06/22/add-comments/16556216826175.jpg" alt="-w679"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>5、创建文章(图文并茂的)</title>
    <url>/2022/06/22/article-with-pic/</url>
    <content><![CDATA[<p>创建文章(图文并茂的), 注意点: 要创建图文并文章需要修改Hexo下的_config.yml文件和安装一个组件。</p>
<h3 id="1、修改-config-yml文件"><a href="#1、修改-config-yml文件" class="headerlink" title="1、修改_config.yml文件"></a>1、修改_config.yml文件</h3><p>修改参数为：true, 具体如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<h3 id="2、安装组件-hexo-asset-image-："><a href="#2、安装组件-hexo-asset-image-：" class="headerlink" title="2、安装组件(hexo-asset-image)："></a>2、安装组件(hexo-asset-image)：</h3><p>使用如下命令安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/xcodebuild/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p><strong>必须要用github的全路径安装，否则会有问题</strong>。</p>
<h3 id="3、创建文章"><a href="#3、创建文章" class="headerlink" title="3、创建文章"></a>3、创建文章</h3><p>通过命令或者是在_post中直接创建md文件和文件夹</p>
<p>方式一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new blog-install</span><br></pre></td></tr></table></figure>
<p>会生成一个blog-install文件夹和blog-install.md的文件</p>
<p>方式二:<br>直接通过手动创建文件和文件夹</p>
<h3 id="4、编辑文章并且插入图片"><a href="#4、编辑文章并且插入图片" class="headerlink" title="4、编辑文章并且插入图片"></a>4、编辑文章并且插入图片</h3><p><img src="/2022/06/22/article-with-pic/16553917041109.jpg" alt="-w1010"></p>
<p>在通过命令发布，在浏览器上访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>浏览器上访问可以看到成功了<br><img src="/2022/06/22/article-with-pic/16553927486059.jpg" alt="-w1083"></p>
<p>到此创建图文文章就完成了</p>
<h3 id="5、个人推荐工具结合使用"><a href="#5、个人推荐工具结合使用" class="headerlink" title="5、个人推荐工具结合使用"></a>5、个人推荐工具结合使用</h3><p>建议本地写文章直接使用MWeb进行编写， 在导出md，在将其直接放到hexo的source&#x2F;_ports目录下</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>1、个人网站搭建流程</title>
    <url>/2022/06/05/blog-install/</url>
    <content><![CDATA[<h1 id="1、安装git"><a href="#1、安装git" class="headerlink" title="1、安装git"></a>1、安装git</h1><p>首先是安装git, mac参照文档进行操作即可。<br><a href="https://git-scm.com/download/mac">https://git-scm.com/download/mac</a></p>
<h1 id="2、下载安装node-js"><a href="#2、下载安装node-js" class="headerlink" title="2、下载安装node.js"></a>2、下载安装node.js</h1><p>接下来是node.js的安装，打开官网下载相关版本安装即可。<br><a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br><img src="/2022/06/05/blog-install/16538315861191/16546155390703.jpg"><br>下载安装即可。</p>
<h1 id="3、环境测试和验证"><a href="#3、环境测试和验证" class="headerlink" title="3、环境测试和验证"></a>3、环境测试和验证</h1><p>node.js的检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p>npm的检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>Git的检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p>上述中显示相关的版本信息，说明都已经安装成功了</p>
<h1 id="4、hexo的安装"><a href="#4、hexo的安装" class="headerlink" title="4、hexo的安装"></a>4、hexo的安装</h1><p><strong>进入站点目录进行安装(注意)</strong></p>
<p>1）使用npm安装Hexo-cli<br>在命令行中执行下面命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>执行可能会看到WARN，直接忽略就可以了。</p>
<p>2）在使用npm安装Hexo<br>在命令行中执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure>
<p>在使用命令检查是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<p><img src="/2022/06/05/blog-install/16538315861191/16546184798842.jpg"><br>说明安装成功了。</p>
<p>3）初始化Hexo<br>在终端中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>接着在输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>体验Hexo</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p><img src="/2022/06/05/blog-install/16538315861191/16547065595571.jpg"></p>
<p>进行部署和调试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s -debug</span><br></pre></td></tr></table></figure>
<p><img src="/2022/06/05/blog-install/16538315861191/16547066343884.jpg"></p>
<p>5）打开浏览器输入：<br><a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="/2022/06/05/blog-install/16538315861191/16547070178034.jpg"></p>
<p>到此基本上就安装完了。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/02/create-new-article-setting/</url>
    <content><![CDATA[<h1 id="7、新建文章设置点："><a href="#7、新建文章设置点：" class="headerlink" title="7、新建文章设置点："></a>7、新建文章设置点：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ！！！！！！！！！！</span><br><span class="line"># 每一项的 : 后面均有一个空格</span><br><span class="line"># 且 : 为英文符号</span><br><span class="line"># ！！！！！！！！！！</span><br><span class="line"></span><br><span class="line">title:</span><br><span class="line"># 文章标题，可以为中文</span><br><span class="line"></span><br><span class="line">date:</span><br><span class="line"># 建立日期，如果自己手动添加，请按固定格式</span><br><span class="line"># 就算不写，页面每篇文章顶部的发表于……也能显示</span><br><span class="line"># 只要在主题配置文件中，配置了 created_at 就行</span><br><span class="line"># 那为什么还要自己加上？</span><br><span class="line"># 自定义文章发布的时间</span><br><span class="line"></span><br><span class="line">updated:</span><br><span class="line"># 更新日期，其它与上面的建立日期类似</span><br><span class="line"># 不过在页面每篇文章顶部，是更新于……</span><br><span class="line"># 在主题配置文件中，是 updated_at</span><br><span class="line"></span><br><span class="line">permalink:</span><br><span class="line"># 若站点配置文件下的 permalink 配置了 title</span><br><span class="line"># 则可以替换文章 URL 里面的 title（文章标题）</span><br><span class="line"></span><br><span class="line">categories:</span><br><span class="line"># 分类，支持多级，比如：</span><br><span class="line"># - technology</span><br><span class="line"># - computer</span><br><span class="line"># - computer-aided-art</span><br><span class="line"># 则为 technology/computer/computer-aided-art</span><br><span class="line"># （不适用于 layout: page）</span><br><span class="line"></span><br><span class="line">tags:</span><br><span class="line"># 标签</span><br><span class="line"># 多个可以这样写 [标签1,标签2,标签3]</span><br><span class="line"># （不适用于 layout: page）</span><br><span class="line"></span><br><span class="line">description:</span><br><span class="line"># 文章的描述，在每篇文章标题下方显示</span><br><span class="line"># 并且作为网页的 description 元数据</span><br><span class="line"># 如果不写，则自动取 &lt;!-- more --&gt;</span><br><span class="line"># 之前的文字作为网页的 description 元数据</span><br><span class="line"></span><br><span class="line">keywords:</span><br><span class="line"># 关键字，并且作为网页的 keywords 元数据</span><br><span class="line"># 如果不写，则自动取 tags 里的项</span><br><span class="line"># 作为网页的 keywords 元数据</span><br><span class="line"></span><br><span class="line">comments:</span><br><span class="line"># 是否开启评论</span><br><span class="line"># 默认值是 true</span><br><span class="line"># 要关闭写 false</span><br><span class="line"></span><br><span class="line">layout:</span><br><span class="line"># 页面布局，默认值是 post，默认值可以在</span><br><span class="line"># 站点配置文件中修改 default_layout</span><br><span class="line"># 另：404 页面可能用到，将其值改为 false</span><br><span class="line"></span><br><span class="line">type:</span><br><span class="line"># categories，目录页面</span><br><span class="line"># tags，标签页面</span><br><span class="line"># picture，用来生成 group-pictures</span><br><span class="line"># quote？</span><br><span class="line"># https://io-oi.me/tech/hello-world/</span><br><span class="line"></span><br><span class="line">photos:</span><br><span class="line"># Gallery support，用来支持画廊╱相册，用法如下：</span><br><span class="line"># - photo_url_1</span><br><span class="line"># - photo_url_2</span><br><span class="line"># - photo_url_3</span><br><span class="line"># https://io-oi.me/tech/hello-world/</span><br><span class="line"></span><br><span class="line">link:</span><br><span class="line"># 文章的外部链接</span><br><span class="line"># https://io-oi.me/tech/hello-world/</span><br><span class="line"></span><br><span class="line">image:</span><br><span class="line"># 自定义的文章摘要图片，只在页面展示，文章内消失</span><br><span class="line"># 此项只有参考本文 5.14 节配置好，否则请勿添加！</span><br><span class="line"></span><br><span class="line">sticky:</span><br><span class="line"># 文章置顶</span><br><span class="line"># 此项只有参考本文 5.15 节配置好，否则请勿添加！</span><br><span class="line"></span><br><span class="line">password:</span><br><span class="line"># 文章密码，此项只有参考教程：</span><br><span class="line"># http://shenzekun.cn/hexo的next主题个性化配置教程.html</span><br><span class="line"># 第 24 节，配置好，否则请勿添加！</span><br><span class="line"># 发现还是有 bug 的，就是右键在新标签中打开</span><br><span class="line"># 然后无论是否输入密码，都能看到内容</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>4、github不支持密码改为token设置操作</title>
    <url>/2022/06/22/github-setting-token/</url>
    <content><![CDATA[<h1 id="github不支持密码改为token设置操作"><a href="#github不支持密码改为token设置操作" class="headerlink" title="github不支持密码改为token设置操作"></a>github不支持密码改为token设置操作</h1><p>1）clone 仓库提示不支持密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192:blog zhongzunfa$ git clone https://github.com/zhongzunfa/Hexo.git</span><br><span class="line">Cloning into &#x27;Hexo&#x27;...</span><br><span class="line">Username for &#x27;https://github.com&#x27;: zhongzunfa</span><br><span class="line">Password for &#x27;https://zhongzunfa@github.com&#x27;:</span><br><span class="line">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class="line">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span><br><span class="line">fatal: Authentication failed for &#x27;https://github.com/zhongzunfa/Hexo.git/&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/06/22/github-setting-token/16551327329477.jpg" alt="-w915"></p>
<ol>
<li>解决方案一：<br>在github中， 找到setting，滑到最后找到Developer settings<br>在选择Personal access tokens<br><img src="/2022/06/22/github-setting-token/16551356148119.jpg" alt="-w971"><br>创建完成后，在clone代码后，提示输入密码时，就输入生成的token即可.</li>
</ol>
<p>3）解决方案二:</p>
<p>未完成。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>2、问题和解决方案</title>
    <url>/2022/06/22/next-theme-problem-resolve/</url>
    <content><![CDATA[<h3 id="1、执行hexo-v出现如下错误："><a href="#1、执行hexo-v出现如下错误：" class="headerlink" title="1、执行hexo -v出现如下错误："></a>1、执行hexo -v出现如下错误：</h3><p>Solve Error: Console expects a writable stream instance<br>是因为版本不匹配导致，必须升级到大于要在10.0版本以上</p>
<p>解决方案：<br>更新node版本，首先是安装n模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure>
<p>安装最新的稳定版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n stable</span><br></pre></td></tr></table></figure>
<p>上述的更新方式特别卡，推荐使用地址下载， 推荐使用迅雷辅助下载最好。<br><a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a><br><img src="/2022/06/22/next-theme-problem-resolve/16538316439838.jpg" alt="-w767"><br>下载完成安装，查看版本是否已经生效<br><img src="/2022/06/22/next-theme-problem-resolve/16538316608140.jpg" alt="-w253"></p>
<h3 id="2、切换主题出现问题"><a href="#2、切换主题出现问题" class="headerlink" title="2、切换主题出现问题"></a>2、切换主题出现问题</h3><p>首先是进入站点目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /Users/zhongzunfa/study/blog/Hexo</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>切换到稳定的tag上，这里切换到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout tags/v5.1.0</span><br></pre></td></tr></table></figure>

<p>修改主目录下的_config.yml文件的主题为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>重新启动后出如下图所示<br><img src="/2022/06/22/next-theme-problem-resolve/16538357450939.jpg" alt="-w1330"></p>
<p>主要原因是因为在hexo在5.0之后把swig给删除了需要自己手动安装。<br>重新安装解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>
<p>重新部署hexo s –debug</p>
<p><img src="/2022/06/22/next-theme-problem-resolve/16538361211513.jpg" alt="-w1071"></p>
]]></content>
      <categories>
        <category>next主题</category>
      </categories>
  </entry>
  <entry>
    <title>1、next主题设置</title>
    <url>/2022/06/22/next-theme-setiting/</url>
    <content><![CDATA[<h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><h3 id="1、创建分类和标签"><a href="#1、创建分类和标签" class="headerlink" title="1、创建分类和标签"></a>1、创建分类和标签</h3><p>在站点文件夹下执行命令创建分类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n page categories</span><br></pre></td></tr></table></figure>
<p>修改source\categories文件夹下index.md文件（<strong>必须要修改</strong>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2022-05-29 23:44:15</span><br><span class="line">type: categories</span><br><span class="line">layout: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>在站点文件夹执行命令创建标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n page tags</span><br></pre></td></tr></table></figure>
<p>修改source\categories文件夹下index.md文件(<strong>必须要修改</strong>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-05-29 23:42:54</span><br><span class="line">type: tags</span><br><span class="line">layout: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>




<h3 id="2、本地搜索设置"><a href="#2、本地搜索设置" class="headerlink" title="2、本地搜索设置"></a>2、本地搜索设置</h3><p>首先在站点根目录，先安装hexo-generator-search插件， 在进行配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class="line"># 本地搜索，需要安装 hexo-generator-search</span><br><span class="line"># 站点根目录执行：npm install hexo-generator-searchdb --save</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  search button</span><br><span class="line">  # auto表示改变输入就自动触发搜索</span><br><span class="line">  # manual表示按下回车键或搜索按钮才触发搜索</span><br><span class="line">  trigger: auto</span><br><span class="line">  # 这里的数字n表示显示每篇文章搜索到的n个结果</span><br><span class="line">  # -1表示显示每篇文章搜索到的全部结果(不建议)</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>

<h3 id="3、文章启用字数统计和阅读时长"><a href="#3、文章启用字数统计和阅读时长" class="headerlink" title="3、文章启用字数统计和阅读时长"></a>3、文章启用字数统计和阅读时长</h3><p>在站点根目录安装hexo-wordcount插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>
<p>接下来进行配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line"># 文章字数展示设置</span><br><span class="line">post_wordcount:</span><br><span class="line">  # 文本显示</span><br><span class="line">  item_text: true</span><br><span class="line">  # 文章字数统计</span><br><span class="line">  wordcount: true</span><br><span class="line">  # 阅读时长</span><br><span class="line">  min2read: true</span><br><span class="line">  # 站点总字数统计</span><br><span class="line">  totalcount: false</span><br><span class="line">  # 该post_wordcount的所有设置另起一行显示</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure>
<p>同时调整一下显示格式：<br>在themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig中修改具体如下：<br>直接搜索post.wordcount、post.min2read</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span title=&quot;&#123;&#123; __(&#x27;post.wordcount&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;span title=&quot;&#123;&#123; __(&#x27;post.min2read&#x27;) &#125;&#125;&quot; &#125;&#125;&quot;&gt;</span><br><span class="line">  &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>


<h3 id="4、设置左侧的头像显示"><a href="#4、设置左侧的头像显示" class="headerlink" title="4、设置左侧的头像显示"></a>4、设置左侧的头像显示</h3><p>编辑主题的_config.yml，新增字段 avatar，值设置成头像的链接地址。</p>
<p>完整的互联网URL例如：<a href="https://avatars1.githubusercontent.com/u/32269?v=3&s=460">https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460</a></p>
<p>站点内的地址例如：<br>&#x2F;uploads&#x2F;avatar.jpg 需要将你的头像图片放置在 站点的 source&#x2F;uploads&#x2F;（可能需要新建uploads目录）<br>&#x2F;images&#x2F;avatar.jpg 需要将你的头像图片放置在 主题的 source&#x2F;images&#x2F; 目录下。</p>
<p>具体配置如下(这里我用的是一个全的互联网地址)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.jpg</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</span><br><span class="line">avatar: https://avatars.githubusercontent.com/u/14095698?s=400&amp;u=f11b97c018052a2af38bb56bbd81471c057003f4&amp;v=4</span><br></pre></td></tr></table></figure>

<h3 id="5、设置社交和社交图标"><a href="#5、设置社交和社交图标" class="headerlink" title="5、设置社交和社交图标"></a>5、设置社交和社交图标</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Social Links</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value is the target link (E.g. GitHub: https://github.com/iissnan)</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/zhongzunfa</span><br><span class="line">  微信: https://www.yourname.com/weixin</span><br><span class="line">  CSDN: https://blog.csdn.net/zhongzunfa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Social Links Icons</span><br><span class="line"># Icon Mapping:</span><br><span class="line">#   Map a menu item to a specific FontAwesome icon name.</span><br><span class="line">#   Key is the name of the item and value is the name of FontAwesome icon. Key is case-senstive.</span><br><span class="line">#   When an globe mask icon presenting up means that the item has no mapping icon.</span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mappings.</span><br><span class="line">  # KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  GitHub: github</span><br><span class="line">  CSDN: leaf</span><br></pre></td></tr></table></figure>
<p>注意点：在这个地址<a href="https://fontawesome.com/v5/cheatsheet">https://fontawesome.com/v5/cheatsheet</a> 中的图标都可以，直接写上名称即可， <strong>但是发现一个问题，有些写上还是不行</strong>具体的原因未知， csdn的就是，使用了自定义的，从地址上找的一个<br><img src="/2022/06/22/next-theme-setiting/16543304174039.jpg" alt="-w768"></p>
<h3 id="6、设置打赏公共能："><a href="#6、设置打赏公共能：" class="headerlink" title="6、设置打赏公共能："></a>6、设置打赏公共能：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># reward</span><br><span class="line">reward_comment: 如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: /images/wechatpay.jpg</span><br><span class="line">alipay: /images/alipay.jpg</span><br></pre></td></tr></table></figure>
<p>将微信和支付宝的收款码, 放到images目录下<br><img src="/2022/06/22/next-theme-setiting/16543336431155.jpg" alt="-w490"></p>
<h3 id="7、设置访问人数、总数等"><a href="#7、设置访问人数、总数等" class="headerlink" title="7、设置访问人数、总数等"></a>7、设置访问人数、总数等</h3><p>首先找到如下位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: 访客数</span><br><span class="line">  site_uv_footer: 人</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: 总访问量</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; 阅读数</span><br><span class="line">  page_pv_footer:</span><br></pre></td></tr></table></figure>
<p>将enbale的配置项改成true, 同时修改对应的标题等，具体如上所示。<br>此外还需要修改不算子的地址, 找到&#x2F;theme&#x2F;next&#x2F;layout&#x2F;_scripts&#x2F;_third-party&#x2F;analytics&#x2F;busuanzi-counter.swig文件<br><img src="/2022/06/22/next-theme-setiting/16556197138156.jpg" alt="-w1205"><br>修改成下述地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</span><br></pre></td></tr></table></figure>
<p>但是经过实验发现该js下载很慢，于是决定将js下载放在</p>
<p>注意点， 在本地显示的是一个乱序的数字，发布后显示就正常了。</p>
<h3 id="8、隐藏网页底部-powered-By-Hexo-x2F-强力驱动"><a href="#8、隐藏网页底部-powered-By-Hexo-x2F-强力驱动" class="headerlink" title="8、隐藏网页底部 powered By Hexo &#x2F; 强力驱动"></a>8、隐藏网页底部 powered By Hexo &#x2F; 强力驱动</h3><p>打开 themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig ,具体如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;copyright&quot; &gt;</span><br><span class="line">  &#123;% set current = date(Date.now(), &quot;YYYY&quot;) %&#125;</span><br><span class="line">  &amp;copy; &#123;% if theme.since and theme.since != current %&#125; &#123;&#123; theme.since &#125;&#125; - &#123;% endif %&#125;</span><br><span class="line">  &lt;span itemprop=&quot;copyrightYear&quot;&gt;&#123;&#123; current &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;with-love&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;fa fa-&#123;&#123; theme.authoricon &#125;&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;author&quot; itemprop=&quot;copyrightHolder&quot;&gt;&#123;&#123; config.author &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.copyright %&#125;</span><br><span class="line">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">  &#123;&#123; __(&#x27;footer.powered&#x27;, &#x27;&lt;a class=&quot;theme-link&quot; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&#x27;) &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &#123;&#123; __(&#x27;footer.theme&#x27;) &#125;&#125; -</span><br><span class="line">  &lt;a class=&quot;theme-link&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;</span><br><span class="line">    NexT.&#123;&#123; theme.scheme &#125;&#125;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/06/22/next-theme-setiting/16545273994568.jpg" alt="-w859"><br>删除红框框住部分。</p>
<h3 id="9、浏览页面显示当前浏览进度"><a href="#9、浏览页面显示当前浏览进度" class="headerlink" title="9、浏览页面显示当前浏览进度"></a>9、浏览页面显示当前浏览进度</h3><p>编辑next主题下的_config.yml，搜索关键字scrollpercent将值改为 true。具体如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> # Scroll percent label in b2t button</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure>


<h3 id="10、分享功能"><a href="#10、分享功能" class="headerlink" title="10、分享功能"></a>10、分享功能</h3><p>编辑next主题下的_config.yml，搜索关键字needmoreshare2 修改为下面设置，具体如下：</p>
<p>占时搁置。</p>
<h3 id="11、配置首页显示摘要"><a href="#11、配置首页显示摘要" class="headerlink" title="11、配置首页显示摘要"></a>11、配置首页显示摘要</h3><p>1）写描述，如下所示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: zzf</span><br><span class="line">date: 2022-06-05 12:16:32</span><br><span class="line">tags:</span><br><span class="line">description: 首次创建文章显示。</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>主要是加上了description这个值。<br>效果：<br><img src="/2022/06/22/next-theme-setiting/16546128430512.jpg" alt="-w676"></p>
<p>2）通过设置标签:<br>在需要进行显示阅读全文的地方写上more标签<br><img src="/2022/06/22/next-theme-setiting/16546129729370.jpg" alt="-w500"><br>效果<br><img src="/2022/06/22/next-theme-setiting/16546130423945.jpg" alt="-w655"></p>
]]></content>
      <categories>
        <category>next主题</category>
      </categories>
  </entry>
  <entry>
    <title>2、hexo安装主题</title>
    <url>/2022/06/21/hexo-install-theme/</url>
    <content><![CDATA[<h1 id="next主题安装"><a href="#next主题安装" class="headerlink" title="next主题安装"></a>next主题安装</h1><p>首先进入站点目录：例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Users/zhongzunfa/xxx/blog/Hexo</span><br></pre></td></tr></table></figure>
<p>在执行如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd hexo</span><br><span class="line">$ git clone https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>

<p>在站点配置文件 _config.yml 中修改主题名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>重启一下,重新访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s -debug</span><br></pre></td></tr></table></figure>
<p>到此主题安装就完成了。 主题详细配置请看next主题配置。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>3、站点和github同步</title>
    <url>/2022/06/22/site-github/</url>
    <content><![CDATA[<h3 id="1、创建仓库"><a href="#1、创建仓库" class="headerlink" title="1、创建仓库"></a>1、创建仓库</h3><p>首先打开github, 点击new创建一个git仓库，需要注意点是仓库的前置必须要和用户名一致，例如我的用户名是zhongzunfa, 那么创建的仓库必须是<br>zhongzunfa.github.io ，具体如下所示<br><img src="/2022/06/22/site-github/16551295093438.jpg"><br>创建完成，创建文件index.html输出如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;zzf&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;hello&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;hello world&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在点击setting文件，在点击pages可以看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your site is published at https://zhongzunfa.github.io/</span><br></pre></td></tr></table></figure>
<p>说明已经发布创建个人站点的git仓库已经创建完成，接下来在浏览器上进行验证， 直接用上面的地址访问可以看hello world显示。<br><img src="/2022/06/22/site-github/16551297926625.jpg" alt="-w381"></p>
<h3 id="2、仓库中创建CNAME并且进行绑定"><a href="#2、仓库中创建CNAME并且进行绑定" class="headerlink" title="2、仓库中创建CNAME并且进行绑定"></a>2、仓库中创建CNAME并且进行绑定</h3><ol>
<li>首先是配置腾讯云的绑定信息<br><img src="/2022/06/22/site-github/16550264842004.jpg" alt="-w1157"><br>注意点：配置是为zhongzunfa.github.io（<strong>配置自己对应的即可</strong>）</li>
</ol>
<p>2）配置github相关的信息<br>进入github博客仓库，点击setting，在左侧菜单中找到Pages点击，<br>先是选择&#x2F;root，接着在Custom domain中写入对应的应<br><img src="/2022/06/22/site-github/16550289781838.jpg" alt="-w1080"><br>等待显示，DNS check successful成功即可。</p>
<p>3）接下来访问域名<br><img src="/2022/06/22/site-github/16559038041805.jpg" alt="-w708"></p>
<h3 id="3、hexo和github中的仓库进行绑定"><a href="#3、hexo和github中的仓库进行绑定" class="headerlink" title="3、hexo和github中的仓库进行绑定"></a>3、hexo和github中的仓库进行绑定</h3><p>先配置发布信息:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/zhongzunfa/zhongzunfa.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>接下来安装插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>在执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br><span class="line"></span><br><span class="line">// 注意如果提示密码问题需要去github上设置token</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>发布完看一下是否将之前存在的CNAME给覆盖替换掉了，如果不在需要重新新建，为了保证不被替换，在source目录下创建一个CNAME文件，<br>并且输入域名即可。<br><img src="/2022/06/22/site-github/16553926080125.jpg" alt="-w742"></p>
<h3 id="4、github最新创新点-不一定要和用户名一样才能映射"><a href="#4、github最新创新点-不一定要和用户名一样才能映射" class="headerlink" title="4、github最新创新点(不一定要和用户名一样才能映射)"></a>4、github最新创新点(不一定要和用户名一样才能映射)</h3><p>可以配置多个自定义域名的映射，在不同的仓库中，比如我就做了两个映射<br>具体如下图所示：<br><img src="/2022/06/22/site-github/16550414478506.jpg" alt="-w1207"><br>it-space仓库</p>
<p><img src="/2022/06/22/site-github/16550414858090.jpg" alt="-w1047"><br>zhongzunfa.github.io仓库<br>通过上述的配置后， 两个仓库都可以进行访问。</p>
<p><strong>注意点1：</strong>是在custom domain中添加域名后，需要删除仓库中默认自动创建的CNAME文件，在重新创建CNAME文件， 在添次添加域名才会生效，具体不是很清楚是什么问题。</p>
<p><strong>注意点2:</strong> 是在域名解析的时候配置的cname对应的值都是zhongzunfa.github.io, 具体如下图所示<br><img src="/2022/06/22/site-github/16550416026618.jpg" alt="-w1027"></p>
<p><img src="/2022/06/22/site-github/16550416162750.jpg" alt="-w1071"></p>
<h3 id="5、创建一个新的仓库存放源代码"><a href="#5、创建一个新的仓库存放源代码" class="headerlink" title="5、创建一个新的仓库存放源代码"></a>5、创建一个新的仓库存放源代码</h3><p>创建一个Hexo仓库，将数据提提交到上面就可以的。<br><img src="/2022/06/22/site-github/16553107519860.jpg" alt="-w970"></p>
<p>如果之前存在了文件夹内容， 就先将其打包一下，删除文件夹， 在clone 仓库下来，在重新解压进去，在提交到GitHub即可</p>
<p><img src="/2022/06/22/site-github/16556113432675.jpg" alt="-w556"></p>
<p><strong>注意点</strong> : 存储放源代码和发布的仓库是不冲突的可以同时存在的。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
</search>
